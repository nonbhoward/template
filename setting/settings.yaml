# project app_config section
#   below space left intentionally blank


# template app_config section
cache:
  enabled: False
  seconds until stale:

deployment:
  # set mode to 'delete' to remove links
  mode:
  source: template
  # targets projects must be in the same directory as this project
  # for example,
  #   ./python_projects/this_project
  #   ./python_projects/target_project
  # in addition, ./setting/deployment.yaml must exist at the target
  # for example, in ./python_projects/target_project/setting/deployment.yaml
  #   receive features:
  #     [ caching, core, developer, networking ]
  # feature categories in the list will be deployed to the target project
  features:
    linked:
      caching:
        data path: [data]
        data management: [tool, data_management.py]
      core:
        common names: [common, names.py]
        common paths: [common, paths.py]
        common shell: [common, shell.sh]
        configure paths: [configure, paths.py]
        configure settings: [configure, settings.py]
        log path: [logs]
        script initialize: [script, initialize.py]
      developer:
        clean up: [devel, clean_up.sh]
        flags: [devel, flags.py]
      networking:
        socket management classes: [tool, socket_management.py]
    unlinked:
      core:
        paths settings: [setting, paths.yaml]
        settings: [setting, settings.yaml]

logger:
  # reference -
  #   https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
  # version -
  #   to be set to an integer value representing the schema version.
  #   The only valid value at present is 1, but having this key allows
  #   the schema to evolve while still preserving backwards compatibility.
  version: 1
  # filters -
  #   the corresponding value will be a dict in which each key is a
  #   filter id and each value is a dict describing how to configure the
  #   corresponding Filter instance.
  filters:
    # The configuring dict is searched for the key name (defaulting to the
    # empty string) and this is used to construct a logging.Filter instance.
    unfiltered:
      name: ''
  # formatters -
  #   the corresponding value will be a dict in which each key is a
  #   formatter id and each value is a dict describing how to configure
  #   the corresponding Formatter instance.
  formatters:
    # The configuring dict is searched for keys format and datefmt
    # (with defaults of None) and these are used to construct a
    # Formatter instance.
    # Changed in version 3.8: a validate key (with default of True) can
    # be added into the formatters section of the configuring dict, this
    # is to validate the format.
    verbose:
      datefmt: '%Y-%m-%d %H:%M:%S'
      format: '%(asctime)s - %(name)s - %(levelname)s - %(module)s - %(lineno)d - %(funcName)s - %(message)s'
    brief:
      datefmt: '%Y-%m-%d %H:%M:%S'
      format: '%(asctime)s - %(levelname)s - %(message)s'
  # handlers -
  #   the corresponding value will be a dict in which each key is a
  #   handler id and each value is a dict describing how to configure
  #   the corresponding Handler instance.
  handlers:
    # The configuring dict is searched for the following keys:
    #   class (mandatory). This is the fully qualified name of the handler class.
    #   filters (optional). A list of ids of the filters for this handler.
    #   formatter (optional). The id of the formatter for this handler.
    #   level (optional). The level of the handler.
    file:
      class: logging.FileHandler
      filename: event.log
      filters: [unfiltered]
      formatter: verbose
      level: DEBUG
  # loggers -
  #   the corresponding value will be a dict in which each key is a logger
  #   name and each value is a dict describing how to configure the
  #   corresponding Logger instance.
  loggers:
    # The configuring dict is searched for the following keys:
    #   filters (optional). A list of ids of the filters for this logger.
    #   handlers (optional). A list of ids of the handlers for this logger.
    #   level (optional). The level of the logger.
    #   propagate (optional). The propagation setting of the logger.
    <module>:
      filters: [unfiltered]
      handlers: [file]
      incremental: no
      level: DEBUG
      propagate: yes
  root:
    filters: [unfiltered]
    handlers: [file]
    incremental: no
    level: DEBUG

socket:
  # mode, server, client, or disabled (default)
  mode:
  buffer size: 4096
  separator: <SEP>
  client:
    # host must be string
    host: ''
    port:
  server:
    # host must be string
    host: ''
    port:
    backlog: 10
